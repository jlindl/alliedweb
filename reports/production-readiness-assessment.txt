PRODUCTION READINESS ASSESSMENT

Project: allied-website
Path: src/app (Next.js App Router)
Date: (generated by assistant)

OVERVIEW
- This assessment reviews the repo for common production readiness criteria: build & runtime config, environment/secret usage, routing/APIs, TypeScript + linting, assets, CI/tests, and outstanding work related to the ServicePageTemplate migration in src/app/insurance-services.
- Quick verdict: The project is close to deployable, but a few key infra items and QA steps are missing before production deployment.

WHAT I FOUND (high level)
- Framework: Next.js (next@15.5.3) with App Router (src/app). React 19 and TypeScript are used.
- Scripts: dev, build, start, lint exist in package.json. Both dev & build use `--turbopack` flags.
- TypeScript: strict mode is enabled in tsconfig.json.
- Linting: ESLint configured (extends next/core-web-vitals + typescript) via `eslint.config.mjs`.
- Styling: Tailwind PostCSS plugin present (tailwindcss v4 in devDependencies, postcss.config.mjs uses @tailwindcss/postcss).
- Service pages: A shared `ServicePageTemplate` exists and many pages under src/app/insurance-services were migrated to use it. Most service pages already import and render `ServicePageTemplate` (migration largely done).
- API routes: There is an app-route at `src/app/api/quote/route.ts` which sends email via nodemailer and depends on runtime environment variables (see ENV VARS below).
- next.config.ts: Present but empty (no caching, image domains, headers, rewrites, or runtime config defined yet).
- .next folder exists in the repo (build artifacts checked into workspace by scanner) but repo lacks visible CI config files (no .github/workflows, no vercel.json, no Dockerfile in repo root).

ENV / SECRETS
- The Quote API requires the following environment variables to work correctly:
  - QUOTE_TO_EMAIL (recipient address for quote emails)
  - SMTP_HOST
  - SMTP_PORT (optional, defaults to 587)
  - SMTP_USER
  - SMTP_PASS
  - FROM_EMAIL (optional; falls back to SMTP_USER)
- Recommendations:
  - Ensure these are set in production environment (Vercel Environment Variables, Docker secrets, or hosting provider config). Do NOT store them in the repo.
  - Add a .env.example at repo root that documents the keys (without values).

ASSETS & IMAGES
- Hero and page images are referenced across service pages via relative imports or static paths under public/images. Verify:
  - All referenced image files exist and are optimized (next/image will optimize at runtime for remote domains if configured).
  - If using external image hosts, add domains in next.config.ts -> images.domains.

SERVICE PAGE MIGRATION STATUS (src/app/insurance-services)
- What I checked: pages under `src/app/insurance-services/**/page.tsx` to ensure they use the shared `ServicePageTemplate`.
- Result: The majority of pages import and use `ServicePageTemplate` already. That pattern is present in many entries (e.g., contractors-and-tradesmen, corporate-manufacturing, retail-shops, professional-indemnity, public-liability-small-businesses, corporate-energy-utilities, corporate-healthcare-life-sciences, corporate-financial-professional-services, corporate-logistics-transport, corporate-technology-media, etc.).
- Outstanding: I did not find any pages that obviously fail to import the template, but a small manual pass is recommended to ensure:
  - No page still contains duplicated hero/ServiceHighlights markup (some pages earlier did; you already fixed RetailShops duplication).
  - Per-page content components are client components and do not re-render template-level elements.
- Suggested small fix: Run a quick grep locally: `rg "import ServicePageTemplate" src/app/insurance-services -n` to verify every `page.tsx` includes it. Convert any remaining outliers to the wrapper+content pattern.

BUILD & LINT
- Lint: ESLint config present. Run `npm run lint` and fix reported issues before release.
- Type-check: TypeScript is configured (strict). Run `tsc --noEmit` (or `next build`) to catch type/runtime build errors.
- Build: `npm run build` uses Next's turbopack. I recommend also trying without turbopack if you see odd errors: `next build`.
- Recommendation: Run a production build locally and fix any runtime-only errors (missing envs, dynamic data during prerender, or unsupported APIs in the App Router).

TESTS & QA
- There are no unit/integration tests in the repository (no test runner config, no test files). Add at least:
  - A small unit test for the `ServicePageTemplate` (renders the hero and children). Use Vitest / Jest + React Testing Library.
  - One integration test that asserts the Quote API returns 400 for missing fields and 500 when SMTP envs are not configured (mock nodemailer).
- Accessibility & Performance: Add Lighthouse audit runs and basic axe accessibility checks as part of CI.

CI / DEPLOYMENT
- I did not find CI/CD config (no `.github/workflows` folder, no `vercel.json`, no `Dockerfile`). Decide your hosting and configure CI:
  - Vercel: recommended for Next.js. Add required environment variables in Vercel project settings.
  - GitHub Actions CI: add workflows to run `npm ci`, `npm run lint`, `npm run build`, and tests.
  - Docker: if you need containerization, add a Dockerfile and multi-stage build.

SECURITY
- Ensure envs (SMTP creds) are stored securely in the host provider.
- Add security-focused linting or dependency auditing (npm audit, Snyk or Dependabot for dependency update PRs).

PRIORITIZED TODO (quick list to reach production-ready)
1) Env docs and secrets (High): Add `reports/.env.example` (or `.env.example` at repo root) listing QUOTE_TO_EMAIL, SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS, FROM_EMAIL. Ensure production host is configured. (Reason: Quote API depends on SMTP, will 500 if not set.)
2) Production build (High): Run `npm run build` locally and fix any issues that appear during build.
3) Lint + Typecheck (High): Run `npm run lint` and `tsc --noEmit` / `next build` and fix errors/warnings.
4) CI config (High): Add a GitHub Actions workflow (or Vercel deployment config) that runs lint, typecheck, build, and tests on PRs to main.
5) Tests (Medium): Add unit tests for template and API route; add one integration test for the quote API (mocking nodemailer).
6) next.config.ts (Medium): Add image domains, security headers, redirects/rewrites and any route-level config you need. Consider adding image optimization and caching policies.
7) Accessibility & Performance (Medium): Run Lighthouse audits, fix critical issues, and add Lighthouse CI or similar in pipeline.
8) Verify images (Low): Ensure all `imageSrc` references exist under public/images and are optimized.
9) Remove .next from repo (if present) and ensure build artifacts are not committed. (Low)
10) Optional: Add monitoring (Sentry) and analytics, and configure error reporting for production.

FILE-SPECIFIC NOTES
- `src/app/api/quote/route.ts` — Requires SMTP envs. It currently returns 500 if SMTP not configured; consider returning a friendlier message to the UI or a feature-flag to hide the form in non-mail-config situations.
- `next.config.ts` — empty; add image domains, security headers, or experimental flags as required by hosting.
- `reports/` — You can add the .env.example and this assessment here (I will add it if you want).

RECOMMENDED NEXT STEPS (I can do these for you)
- I can create a `.env.example` file documenting required env variables.
- I can scaffold a minimal GitHub Actions CI workflow that runs lint, type-check and build on PRs.
- I can run a quick grep to list any `page.tsx` files that don't import `ServicePageTemplate` and create a todo list with exact file paths.
- I can add a small unit test scaffold (Vitest + RTL) and one test for the Quote API (mocking nodemailer).

QUALITY GATES (what to run locally / in CI)
- npm ci
- npm run lint
- npm run build
- npm test (if tests added)
- Optional: npm run start to smoke-test the build locally

MAP OF REQUIREMENTS -> STATUS
- Shared ServicePageTemplate usage across insurance pages: Mostly Done (manual pass suggested)
- Email/Quote API production-ready (env & monitoring): Deferred (needs envs configured and error handling)
- Build & Type-check: Partially Done (configs present) — run build to validate; fix issues reported by build/tsc
- Linting: Config present, run & fix (not yet executed in this assessment)
- Tests: Deferred (no tests found)
- CI/CD: Deferred (no workflows or hosting config found)

If you want, I can implement some of the High priority items now. Which would you like me to do next? Options:
- A) Create a `.env.example` in repo root listing required env keys.
- B) Add a minimal GitHub Actions workflow that runs lint + build on PRs.
- C) Produce an exact list of `src/app/insurance-services` `page.tsx` files that still do not import `ServicePageTemplate` (and create per-file TODOs).
- D) Run `npm run build` in a terminal here and report any errors (note: this will run a full Next.js build locally and may take time).

END
